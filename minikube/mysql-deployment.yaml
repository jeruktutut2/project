# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-pv-claim
#   labels:
#     app: project-mysql
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: project-mysql
#   labels:
#     app: project-mysql
#     # tier: database
# spec:
#   selector:
#     matchLabels:
#       app: project-mysql
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: project-mysql
#     spec:
#       containers:
#         - image: mysql:8.1.0
#           name: mysql
#           env:
#             - name: MYSQL_ROOT_PASSWORD
#               value: "12345"
#           ports:
#             - containerPort: 3306
#               name: project-mysql
#           volumeMounts:
#             - name: mysql-persistent-storage
#               mountPath: /var/lib/mysql
#       volumes:
#         - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
#           persistentVolumeClaim:
#             claimName: mysql-pv-claim
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: project-mysql
#   labels:
#     app: project-mysql
# spec:
#   ports:
#     - port: 3306
#       targetPort: 3306
#   selector:
#     app: project-mysql
#   clusterIP: None


#   # Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-pv-claim # name of PVC essential for identifying the storage data
#   labels:
#     app: project-mysql
#     # tier: database
# spec:
#   accessModes:
#     - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
#   resources:
#     requests:
#       storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
# ---
# # Configure 'Deployment' of mysql server
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: project-mysql
#   labels:
#     app: project-mysql
#     # tier: database
# spec:
#   selector: # mysql Pod Should contain same labels
#     matchLabels:
#       app: project-mysql
#       # tier: database
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels: # Must match 'Service' and 'Deployment' selectors
#         app: project-mysql
#         # tier: database
#     spec:
#       containers:
#         - image: mysql:8.1.0 # image from docker-hub
#           args:
#             - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
#           name: mysql
#           env:
#             - name: MYSQL_ROOT_PASSWORD
#               value: 12345
#           ports:
#             - containerPort: 3306
#               name: mysql
#           volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
#             - name: mysql-persistent-storage
#               mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
#       volumes:
#         - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
#           persistentVolumeClaim:
#             claimName: mysql-pv-claim
# ---
# # Define a 'Service' To Expose mysql to Other Services
# apiVersion: v1
# kind: Service
# metadata:
#   name: project-mysql  # DNS name
#   labels:
#     app: project-mysql
#     # tier: database
# spec:
#   ports:
#     - port: 3306
#       targetPort: 3306
#   selector:       # mysql Pod Should contain same labels
#     app: project-mysql
#     # tier: database
#   clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant

# apiVersion: v1
# kind: Service
# metadata:
#   name: project-mysql
# spec:
#   ports:
#   - port: 3306
#   selector:
#     app: project-mysql
#   clusterIP: None
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: project-mysql
# spec:
#   selector:
#     matchLabels:
#       app: project-mysql
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: project-mysql
#     spec:
#       containers:
#       - image: mysql:8.1.0
#         name: mysql
#         env:
#           # Use secret in real usage
#         - name: MYSQL_ROOT_PASSWORD
#           value: 12345
#         ports:
#         - containerPort: 3306
#           name: mysql
#         volumeMounts:
#         - name: mysql-persistent-storage
#           mountPath: /var/lib/mysql
#       volumes:
#       - name: mysql-persistent-storage
#         persistentVolumeClaim:
#           claimName: mysql-pv-claim

# apiVersion: v1
# kind: Service
# metadata:
#   name: project-mysql
# spec:
#   ports:
#   - port: 3306
#   selector:
#     app: project-mysql
#   clusterIP: None
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: project-mysql
# spec:
#   selector:
#     matchLabels:
#       app: project-mysql
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: project-mysql
#     spec:
#       containers:
#       - image: mysql:5.6
#         name: mysql
#         env:
#           # Use secret in real usage
#         - name: MYSQL_ROOT_PASSWORD
#           value: "12345"
#         ports:
#         - containerPort: 3306
#           name: mysql
#         volumeMounts:
#         - name: mysql-persistent-storage
#           mountPath: /var/lib/mysql
#       volumes:
#       - name: mysql-persistent-storage
#         persistentVolumeClaim:
#           claimName: mysql-pv-claim

# apiVersion: v1
# kind: Service
# metadata:
#   name: mysql
# spec:
#   ports:
#   - port: 3306
#   selector:
#     app: mysql
#   clusterIP: None
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mysql
# spec:
#   selector:
#     matchLabels:
#       app: mysql
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: mysql
#     spec:
#       containers:
#       - image: mysql:5.6
#         name: mysql
#         env:
#           # Use secret in real usage
#         - name: MYSQL_ROOT_PASSWORD
#           value: password
#         ports:
#         - containerPort: 3306
#           name: mysql
#         volumeMounts:
#         - name: mysql-persistent-storage
#           mountPath: /var/lib/mysql
#       volumes:
#       - name: mysql-persistent-storage
#         persistentVolumeClaim:
#           claimName: mysql-pv-claim

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: kubernetes.io/basic-auth
stringData:
  password: "12345"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-mysql
spec:
  selector:
    matchLabels:
      app: project-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: project-mysql
    spec:
      containers:
      - image: mysql:8.1.0
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: project-mysql
spec:
  ports:
  - port: 3306
  selector:
    app: project-mysql